在七步的基础上，Bean的生命周期在bean后处理器before之前，before之后，以及使用Bean之后(销毁之前)这三个节点增加了三步
点位1：在Bean后处理器before之前检查类是否实现了Aware相关接口，如果实现了接口，测试调用这些接口的方法
调用这些方法的目的是传递一些数据，方便使用
点位2：在Bean后处理器before之后是否实现了InitializingBean接口，如果实现了，调用接口的方法
点位3：在使用Bean之后(销毁)Bean之前检查是否实现了DisposableBean接口，如果实现了，调用接口的方法
三个点位都是检查你这个Bean是否实现了某些特定的接口，如果实现了，则spring容器会调用接口里面的方法
第一步，调用bean的无参数构造方法！
第二步，给对象的属性赋值
第三步，bean后处理器before之前bean的名字user
第三步，bean后处理器before之前bean的加载器sun.misc.Launcher$AppClassLoader@18b4aac2
第三步，bean后处理器before之前创建bean的工厂org.springframework.beans.factory.support.DefaultListableBeanFactory@1563da5: defining beans [user,u]; root of factory hierarchy
第四步，执行bean后处理器的before方法
第五步，InitializingBean's afterPropertiesSet方法
第六步，初始化bean
第七步，执行bean后处理器的afrer方法
第八步：使用beanUser{name='张三'}
第九步，实现了Disposable接口
第十步，销毁bean
注意：spring 容器的只对singleton的bean进行完整的生命周期管理，scope属性值如果为prototype,spring容器只将bean初始化，
等到客户端拿到bean后，spring容器不再管理bean的生命周期
==================================================================================================================
spring的.xml文件
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
    <bean id="user" class="com.yuan.beantenlifecycle.User" init-method="initbean" destroy-method="distorybean">
        <property name="name" value="张三"></property>
    </bean>
    <bean id="u" class="com.yuan.beantenlifecycle.LogBeanPostProcessor"></bean>
</beans>
LogBeanPostProcess.class文件
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.config.BeanPostProcessor;

public class LogBeanPostProcessor implements BeanPostProcessor {
    //两个参数，第一个，刚创建的bean的对象，第二个，bean对象的名字
    @Override
    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {
        System.out.println("第四步，执行bean后处理器的before方法");
        return BeanPostProcessor.super.postProcessBeforeInitialization(bean, beanName);
    }

    @Override
    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {
        System.out.println("第七步，执行bean后处理器的afrer方法");
        return BeanPostProcessor.super.postProcessAfterInitialization(bean, beanName);
    }
}
=================================================================================================================
user.class文件
package com.yuan.beantenlifecycle;

import org.springframework.beans.BeansException;
import org.springframework.beans.factory.*;

/**
 * 实现了spring
 */
public class User implements BeanNameAware, BeanFactoryAware, BeanClassLoaderAware, InitializingBean,DisposableBean {
    private String name;

    public User() {
        System.out.println("第一步，调用bean的无参数构造方法！");
    }

    public void setName(String name) {
        System.out.println("第二步，给对象的属性赋值");
        this.name = name;
    }

    @Override
    public String toString() {
        return "User{" +
                "name='" + name + '\'' +
                '}';
    }


    public void initbean(){
        System.out.println("第六步，初始化bean");
    }
    public void distorybean(){
        System.out.println("第十步，销毁bean");
    }
    @Override
    public void setBeanClassLoader(ClassLoader classLoader) {
        System.out.println("第三步，bean后处理器before之前bean的加载器"+classLoader);
    }

    @Override
    public void setBeanFactory(BeanFactory beanFactory) throws BeansException {
        System.out.println("第三步，bean后处理器before之前创建bean的工厂"+beanFactory);
    }

    @Override
    public void setBeanName(String name) {
        System.out.println("第三步，bean后处理器before之前bean的名字"+name);
    }

    @Override
    public void afterPropertiesSet() throws Exception {
        System.out.println("第五步，InitializingBean's afterPropertiesSet方法");
    }

    @Override
    public void destroy() throws Exception {
        System.out.println("第九步，实现了Disposable接口");
    }
}
===========================================================================================================
LogPostProcess.class
package com.yuan.beantenlifecycle;

import org.springframework.beans.BeansException;
import org.springframework.beans.factory.config.BeanPostProcessor;

public class LogBeanPostProcessor implements BeanPostProcessor {
    //两个参数，第一个，刚创建的bean的对象，第二个，bean对象的名字
    @Override
    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {
        System.out.println("第四步，执行bean后处理器的before方法");
        return BeanPostProcessor.super.postProcessBeforeInitialization(bean, beanName);
    }

    @Override
    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {
        System.out.println("第七步，执行bean后处理器的afrer方法");
        return BeanPostProcessor.super.postProcessAfterInitialization(bean, beanName);
    }
}
