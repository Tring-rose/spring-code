Bean的循环依赖之单例模式+set
/*
*在singleton+set模式下依赖循环不会出现异常的主要原因是在singleton+set模式下的管理主要分为两阶段
*第一阶段：在spring容器加载的时候实例化Bean，只要其中任意一个Bean实例化后就"曝光"【不等属性赋值就曝光】
*第二阶段：在进行曝光之后，再进行对属性的赋值(调用set方法)
*核心解决方案是，实例化对象和对象的赋值分两个阶段完成
*【注意】：只有在scope的属性值是singleton的情况下,Bean才会进行"曝光"措施
*当Hasband和Wife都为多例的情况下，多例模式+set会出现BeanCurrentlyCreationException[Bean正在创建中异常]
*当两个Bean的scope都是prototype属性值的时候才会出现该异常，只要其中的一个scope属性为singleton时才不会出现该异常
*/
========================================================================
spring的.xml文件
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
    <bean id="husband" class="com.yuan.Husband" >
        <property name="name" value="小明"></property>
        <property name="wife" ref="wife"></property>
    </bean>
    <bean id="wife" class="com.yuan.Wife" >
        <property name="name" value="小红"></property>
        <property name="husband" ref="husband"></property>
    </bean>
</beans>
=======================================================================
Wife类文件
package com.yuan;

public class Wife {
    private String name;
    private Husband husband;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Husband getHusband() {
        return husband;
    }

    public void setHusband(Husband husband) {
        this.husband = husband;
    }

    @Override
    public String toString() {
        return "Wife{" +
                "name='" + name + '\'' +
                ", husband=" + husband.getName() +
                '}';
    }
}
===========================================================================================
Husband类文件：
package com.yuan;

public class Husband {
    private String name;
    private Wife wife;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Wife getWife() {
        return wife;
    }

    public void setWife(Wife wife) {
        this.wife = wife;
    }

    @Override
    public String toString() {
        return "Husband{" +
                "name='" + name + '\'' +
                ", wife=" + wife.getName() +
                '}';
    }
}
=================================================================
注意：无论是Husband类还是Wife类，重写的tostrig方法里面的wife(husband)都要调用其getname方法，否则会陷入死循环进行报错
运行结果：
Husband{name='小明', wife=小红}
Wife{name='小红', husband=小明}

